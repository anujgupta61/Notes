Multithreading -
Multithreading in java is a process of executing multiple threads simultaneously.
Java Multithreading is mostly used in games, animation etc.

Multitasking - Multitasking is a process of executing multiple tasks simultaneously. We use multitasking to utilize the CPU. Multitasking can be achieved by two ways:
	Process-based Multitasking(Multiprocessing): Each process have its own address in memory; Process is heavyweight; Cost of communication 		between the process is high; Switching from one process to another require some time for saving and loading registers, memory maps, 		updating lists etc.
	Thread-based Multitasking(Multithreading): Threads share the same address space; Thread is lightweight; Cost of communication between the 		thread is low.

At least one process is required for each thread.

A thread is a lightweight sub process, a smallest unit of processing. It is a separate path of execution.
Threads are independent, if there occurs exception in one thread, it doesn't affect other threads.
There can be multiple processes inside the OS and one process can have multiple threads. At a time one thread is executed only.

Life cycle of a Thread (Thread States) - 
A thread can be in one of the five states. According to sun, there is only 4 states in thread life cycle in java new, runnable, non-runnable and terminated. There is no running state. For better understanding, it is divided in 5 states.
The life cycle of the thread in java is controlled by JVM. The java thread states are as follows:
	New - The thread is in new state if you create an instance of Thread class but before the invocation of start() method.
	Runnable - The thread is in runnable state after invocation of start() method, but the thread scheduler has not selected it to be the running 			thread.
	Running - The thread is in running state if the thread scheduler has selected it.
	Non-Runnable (Blocked) - This is the state when the thread is still alive, but is currently not eligible to run. Sleep, block on I/O, wait 							for lock, suspend.
	Terminated - A thread is in terminated or dead state when its run() method exits.

There are two ways to create a thread: By extending Thread class & By implementing Runnable interface.
Thread class provide constructors and methods to create and perform operations on a thread. Thread class extends Object class and implements Runnable interface.
The Runnable interface should be implemented by any class whose instances are intended to be executed by a thread. Runnable interface have only one method named run(): is used to perform action for a thread.

start() method of Thread class is used to start a newly created thread. The thread moves from New state to the Runnable state. When the thread gets a chance to execute, its target run() method will run.

class Multi extends Thread {  
	public void run() {  
		System.out.println("thread is running...");  
	}  

	public static void main(String args[]) {  
		Multi t1 = new Multi();  
		t1.start();  
	}  
}  

class Multi3 implements Runnable {  
	public void run() {  
		System.out.println("thread is running...");  
	}  
	  
	public static void main(String args[]) {  
		Multi3 m1 = new Multi3();  
		Thread t1 = new Thread(m1);  
		t1.start();  
	}  
}  

Thread scheduler in java is the part of the JVM that decides which thread should run. There is no guarantee that which runnable thread will be chosen to run by the thread scheduler. Only one thread at a time can run in a single process. The thread scheduler mainly uses preemptive (higher priority thread preempts currently running thread) or time slicing scheduling (fixed time quantum) to schedule the threads.

The sleep() method of Thread class is used to sleep a thread for the specified amount of time. (throws InterruptedException)
After starting a thread, it can never be started again. If you does so, an IllegalThreadStateException is thrown.

start() method starts each thread in a separate call stack.
Invoking the run() method from main thread (main method), the run() method goes onto the current call stack rather than at the beginning of a new call stack.
The join() method waits for a thread to die. In other words, it causes the currently running threads to stop executing until the thread it joins with completes its task.
The currentThread() method returns a reference to the currently executing thread object.
getName(): is used to return the name of a thread.
setName(String name): is used to change the name of a thread.
By default, each thread has a name i.e. thread-0, thread-1 and so on.

Each thread have a priority. Priorities are represented by a number between 1 and 10. In most cases, thread schedular schedules the threads according to their priority (known as preemptive scheduling). But it is not guaranteed because it depends on JVM specification that which scheduling it chooses.
3 constants defined in Thread class: NORM_PRIORITY, MIN_PRIORITY and MAX_PRIORITY
Default priority of a thread is 5 (NORM_PRIORITY). The value of MIN_PRIORITY is 1 and the value of MAX_PRIORITY is 10.

Daemon thread in java is a service provider thread that provides services to the user thread. Its life depends on the mercy of user threads i.e. when all the user threads dies, JVM terminates this thread automatically.
There are many java daemon threads running automatically e.g. gc, finalizer etc.
It provides services to user threads for background supporting tasks. It has no role in life than to serve user threads.
It is a low priority thread.
setDaemon(boolean status) - is used to mark the current thread as daemon thread or user thread.
isDaemon() - is used to check whether current is daemon.
If you want to make a user thread as Daemon, it must not be started already otherwise it will throw IllegalThreadStateException.

Java Thread pool represents a group of worker threads that are waiting for the job and reuse many times.
In case of thread pool, a group of fixed size threads are created. A thread from the thread pool is pulled out and assigned a job by the service provider. After completion of the job, thread is contained in the thread pool again.
Better performance; It saves time because there is no need to create new thread.
It is used in Servlet and JSP where container creates a thread pool to process the request.

ThreadGroup in Java -
Java provides a convenient way to group multiple threads in a single object. In such way, we can suspend, resume or interrupt group of threads by a single method call. Now suspend(), resume() and stop() methods are deprecated.

The shutdown hook can be used to perform cleanup resource or save the state when JVM shuts down normally or abruptly. Performing clean resource means closing log file, sending some alerts or something else. So if you want to execute some code before JVM shuts down, use shutdown hook.
The JVM shuts down when: user presses ctrl+c on the command prompt, System.exit(int) method is invoked, user logoff, user shutdown etc.
The addShutdownHook(Thread hook) method of Runtime class is used to register the thread with the Virtual Machine.
The object of Runtime class can be obtained by calling the static factory method getRuntime(). For example:
Runtime r = Runtime.getRuntime();
The shutdown sequence can be stopped by invoking the halt(int) method of Runtime class. This method does not cause shutdown hooks to be started.

Java Garbage Collection -
In java, garbage means unreferenced objects. Garbage Collection is a way to destroy the unused objects.
To do so, we were using free() function in C language and delete() in C++. But, in java it is performed automatically. So, java provides better memory management.
How can an object be unreferenced: By nulling the reference, By assigning a reference to another, By annonymous object etc.
The finalize() method is invoked each time before the object is garbage collected. This method can be used to perform cleanup processing. This method is defined in Object class as: protected void finalize() {}
The Garbage collector of JVM collects only those objects that are created by new keyword. So if you have created any object without new, you can use finalize method to perform cleanup processing (destroying remaining objects).
The gc() method is used to invoke the garbage collector to perform cleanup processing. The gc() is found in System and Runtime classes.
	System.gc();
Garbage collection is performed by a daemon thread called Garbage Collector(GC). This thread calls the finalize() method before object is garbage collected.

Java Runtime class is used to interact with java runtime environment. Java Runtime class provides methods to execute a process, invoke GC, get total and free memory etc. There is only one instance of java.lang.Runtime class is available for one java application.
The Runtime.getRuntime() method returns the singleton instance of Runtime class.