Spring framework makes the easy development of JavaEE application.
Spring is a lightweight framework.
It can be thought of as a framework of frameworks because it provides support to various frameworks such as Struts, Hibernate, Tapestry, EJB, JSF etc.

Inversion Of Control (IOC) and Dependency Injection -
In software engineering, inversion of control (IoC) is a design principle in which custom-written portions of a computer program receive the flow of control from
 a generic framework. A software architecture with this design inverts control as compared to traditional procedural programming.
These are the design patterns that are used to remove dependency from the programming code.
They make the code easier to test and maintain. Let's understand this with the following code:
class Employee {
  Address address;
  Employee() {
    address = new Address();
  }
}
In such case, there is dependency between the Employee and Address (tight coupling). In the Inversion of Control scenario, we do this something like this:
class Employee {
  Address address;
  Employee(Address address) {
    this.address = address;
  }
}
Thus, IOC makes the code loosely coupled. In such case, there is no need to modify the code if our logic is moved to new environment.

Advantages of Spring Framework -
1) Predefined Templates: templates for JDBC, Hibernate, JPA etc. technologies
2) Loose Coupling: because of dependency injection
3) Easy to test: because of dependency injection
4) Lightweight: because of its POJO implementation
5) Fast Development: its support to various frameworks makes the easy development of JavaEE application
6) Powerful abstraction: powerful abstraction to JavaEE specifications such as JMS, JDBC, JPA and JTA
7) Declarative support: declarative support for caching, validation, transactions and formatting

Spring Modules -
Test: This layer provides support of testing with JUnit and TestNG.
Spring Core Container: The Spring Core container contains core, beans, context and expression language (EL) modules.
    Core and Beans: These modules provide IOC and Dependency Injection features.
    Context: This module supports internationalization (I18N), EJB, JMS, Basic Remoting.
    Expression Language: It is an extension to the EL defined in JSP. It provides support to setting and getting property values, method invocation,
                          accessing collections and indexers, named variables, logical and arithmetic operators, retrieval of objects by name etc.
AOP, Aspects and Instrumentation: These modules support aspect oriented programming implementation where you can use Advices, Pointcuts etc. to decouple the code.
                                  The aspects module provides support to integration with AspectJ.
                                  The instrumentation module provides support to class instrumentation and classloader implementations.
Data Access / Integration: This group comprises of JDBC, ORM, OXM, JMS and Transaction modules. These modules basically provide support to interact with the database.
Web: This group comprises of Web, Web-Servlet, Web-Struts and Web-Portlet. These modules provide support to create web application.

Simple steps to create the spring application in Eclipse IDE -
create the java project
add spring jar files
create the class
create the xml file to provide the values
create the test class

IoC Container -
The IoC container is responsible to instantiate, configure and assemble the objects.
The IoC container gets informations from the XML file and works accordingly. The main tasks performed by IoC container are:
to instantiate the application class
to configure the object
to assemble the dependencies between the objects
There are two types of IoC containers. They are:
BeanFactory
ApplicationContext
The ApplicationContext interface is built on top of the BeanFactory interface.
It adds some extra functionality than BeanFactory such as simple integration with Spring's AOP, message resource handling (for I18N), event propagation,
application layer specific context (e.g. WebApplicationContext) for web application. So it is better to use ApplicationContext than BeanFactory.
The XmlBeanFactory is the implementation class for the BeanFactory interface.
To use the BeanFactory, we need to create the instance of XmlBeanFactory class as given below:
    Resource resource=new ClassPathResource("applicationContext.xml");
    BeanFactory factory=new XmlBeanFactory(resource);
The ClassPathXmlApplicationContext class is the implementation class of ApplicationContext interface.
We need to instantiate the ClassPathXmlApplicationContext class to use the ApplicationContext as given below:
    ApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");

Dependency Lookup -
The Dependency Lookup is an approach where we get the resource after demand. There can be various ways to get the resource for example:
   directly by new keyword: A obj = new AImpl();
   by calling the static factory method: A obj = A.getA();
   by JNDI (Java Naming Directory Interface): Context ctx = new InitialContext();
                                              Context environmentCtx = (Context) ctx.lookup("java:comp/env");
                                              A obj = (A)environmentCtx.lookup("A");
There are mainly two problems of dependency lookup - Tight coupling (If resource is changed, we need to perform a lot of modification in the code)
                                                      Not easy for testing

The Dependency Injection is a design pattern that removes the dependency of the programs.
In such case we provide the information from the external source such as XML file. It makes our code loosely coupled and easier for testing.
Spring framework provides two ways to inject dependency:
    By Constructor (<constructor-arg value="10" type="int"></constructor-arg>)
        Constructor Injection with Dependent Object: (<ref bean="a1"/>)
        Constructor Injection with Collection: (<list> <value>value1</value> <value>value2</value> </list>, <set>.......</set>, <map>..........</map>)
        Constructor Injection with Non-String Collection (having Dependent Object): (<list>  <ref bean="ans1"/>  <ref bean="ans2"/>  </list>)
        Constructor Injection with Map: (<map>  <entry key="Java is a Programming Language"  value="Ajay Kumar"></entry>  </map>)
        Constructor Injection with Non-String Map (having dependent Object): (<map>  <entry key-ref="answer1" value-ref="user1"></entry>  </map>)
    By Setter method (<property name="id">  <value>20</value>  </property> Or <property name="addressLine1" value="51,Lohianagar"></property>)
        Setter Injection with Dependent Object: (<property name="address" ref="address1"></property>)
        Setter Injection with Collection: (<property name="answers">  <list>  <value>Java is a programming language</value> </list> </property>)
        Setter Injection with Non-String Collection (having Dependent Object): (<property name="answers">
                                                                                  <list>
                                                                                    <ref bean="answer1"/>
                                                                                    <ref bean="answer2"/>
                                                                                  </list>
                                                                                </property>)
        Setter Injection with Map: (<property name="answers">  <map>  <entry key="Java is a programming language" value="Sonoo Jaiswal"></entry> </map> </property>)
        Setter Injection with Non-String Map (having dependent Object): (<property name="answers">
                                                                          <map>
                                                                            <entry key-ref="answer1" value-ref="user1"></entry>
                                                                          </map>
                                                                        </property>)
Inheriting Bean in Spring - By using the parent attribute of bean, we can specify the inheritance relation between the beans.
                            In such case, parent bean values will be inherited to the current bean.

Difference between constructor and setter injection -
Partial dependency: can be injected using setter injection but it is not possible by constructor.
Overriding: Setter injection overrides the constructor injection. If we use both constructor and setter injection, IOC container will use the setter injection.
Changes: We can easily change the value by setter injection. It doesn't create a new bean instance always like constructor.
          So setter injection is flexible than constructor injection.

Autowiring in Spring -
Autowiring feature of spring framework enables you to inject the object dependency implicitly. It internally uses setter or constructor injection.
Autowiring can't be used to inject primitive and string values. It works with reference only.
It requires the less code because we don't need to write the code to inject the dependency explicitly.
No control of programmer.
Autowiring Modes -
no:	It is the default autowiring mode. It means no autowiring by default.
      <bean id="a" class="org.sssit.A" autowire="no"></bean>
byName:	The byName mode injects the object dependency according to name of the bean. In such case, property name and bean name must be same.
        It internally calls setter method.
        <bean id="a" class="org.sssit.A" autowire="byName"></bean>
byType:	The byType mode injects the object dependency according to type. So property name and bean name can be different. It internally calls setter method.
        <bean id="a" class="org.sssit.A" autowire="byType"></bean>
constructor: The constructor mode injects the dependency by calling the constructor of the class. It calls the constructor having large number of parameters.
          <bean id="a" class="org.sssit.A" autowire="constructor"></bean>
autodetect:	It is deprecated since Spring 3.

Dependency Injection with Factory Method -
Spring framework provides facility to inject bean using factory method. To do so, we can use two attributes of bean element.
    factory-method: represents the factory method that will be invoked to inject the bean.
    factory-bean: represents the reference of the bean by which factory method will be invoked. It is used if factory method is non-static.
A method that returns instance of a class is called factory method.
    public static A getA() { // factory method
      return new A();
    }
There can be three types of factory method:
1) A static factory method that returns instance of its own class. It is used in singleton design pattern.
    <bean id="a" class="com.javatpoint.A" factory-method="getA"></bean>
2) A static factory method that returns instance of another class. It is used instance is not known and decided at runtime.
    <bean id="b" class="com.javatpoint.A" factory-method="getB"></bean>
3) A non-static factory method that returns instance of another class. It is used instance is not known and decided at runtime.
    <bean id="a" class="com.javatpoint.A"></bean>
    <bean id="b" class="com.javatpoint.A" factory-method="getB" factory-bean="a"></bean>

ORM (Object-relational mapping) - Saving objects in table of Relational database. Hiberate (An implementation of JPA) and JPA are frameworks for ORM.
Spring with ORM Frameworks -
Spring provides API to easily integrate Spring with ORM frameworks such as Hibernate, JPA(Java Persistence API), JDO(Java Data Objects), Oracle Toplink and iBATIS.
Advantages of ORM Frameworks with Spring - Less coding is required, Easy to test, Better exception handling, Integrated transaction management
Hibernate and Spring Integration:
In hibernate framework, we provide all the database information hibernate.cfg.xml file.
But if we are going to integrate the hibernate application with spring, we don't need to create the hibernate.cfg.xml file.
We can provide all the information in the applicationContext.xml file.
The Spring framework provides HibernateTemplate class,
so you don't need to follow so many steps like create Configuration, BuildSessionFactory, Session, beginning and committing transaction etc.
Spring Data JPA:
Spring Data JPA API provides JpaTemplate class to integrate spring application with JPA.
JPA (Java Persistent API) is the sun specification for persisting objects in the enterprise application.
It is currently used as the replacement for complex entity beans.
The implementation of JPA specification are provided by many vendors such as: Hibernate, Toplink, iBatis, OpenJPA etc.

MVC (Model-View-Controller) -
The Model-View-Controller (MVC) is an architectural pattern that separates an application into three main logical components: the model, the view, and the controller.
Each of these components are built to handle specific development aspects of an application.
MVC is one of the most frequently used industry-standard web development framework to create scalable and extensible projects.
Following are the components of MVC −
Model: The Model component corresponds to all the data-related logic that the user works with.
View: The View component is used for all the UI logic of the application.
Controller: Controllers act as an interface between Model and View components to process all the business logic and incoming requests,
            manipulate data using the Model component and interact with the Views to render the final output.
In Spring Web MVC, DispatcherServlet class works as the front controller. It is responsible to manage the flow of the spring mvc application.
The @Controller annotation is used to mark the class as the controller in Spring 3.
The @RequestMapping annotation is used to map the request url. It is applied on the method.
Flow of Spring Web MVC:
All the incoming request is intercepted by the DispatcherServlet that works as the front controller.
The DispatcherServlet gets entry of handler mapping from the xml file and forwards the request to the controller. The controller returns an object of ModelAndView.
The DispatcherServlet checks the entry of view resolver in the xml file and invokes the specified view component.
There are given 7 steps for creating the spring MVC application. The steps are as follows:
      Create the request page (optional)
      Create the controller class
      Provide the entry of controller in the web.xml file
      Define the bean in the xml file
      Display the message in the JSP page
      Load the spring core and mvc jar files
      Start server and deploy the project
